// Code generated by go-bindata.
// sources:
// mock/mock.json
// testcase/test1.json
// testcase/test2.json
// DO NOT EDIT!

package assembly

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mockMockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5d\x73\xe2\x36\x14\x7d\xcf\xaf\xf0\xf8\xb9\xa6\xb6\x89\x8d\xf1\x5b\xb3\x40\x3e\xda\x18\x27\x61\xbb\x81\x4e\x47\x23\xe4\x6b\x5b\x1b\x4b\x0a\x92\x0c\x81\x4e\xfe\x7b\xc7\x66\x69\x16\x50\xb2\xb4\xd3\x19\x86\xf1\x48\xe7\x1e\x49\xe7\xdc\x8f\xbf\xce\x2c\xcb\xb2\xec\x0c\x96\x94\x80\xb2\x63\x6b\xbb\xd0\x2e\xea\x12\x24\x13\x4a\x63\xbd\xbf\xd1\x6e\x8a\x9b\xab\x0b\xaf\xc4\x61\x72\x39\x9e\xf4\xcf\xfb\xdd\xd2\xc9\xc9\xcd\xd4\x71\x8a\x87\xc8\xfd\xb2\x61\xc9\x51\x44\x1b\x55\xd6\x8c\x66\x54\xaf\xed\xd8\x0a\xdc\x9f\x8e\xf7\x2b\x41\x70\x05\x76\x6c\xd9\xb9\x74\x46\xf7\xb6\x01\xa2\x81\x3d\x83\xc4\xba\x96\x80\xd4\x0e\xfd\xc9\x84\xa4\x0a\xd5\x8a\xf2\x02\x01\x03\x59\x00\x27\x6b\x54\x02\xd6\x76\x6c\xe5\xb8\x52\x60\x88\x28\xb1\x42\x39\xe6\x1f\x20\x94\xc8\xf5\x0a\x4b\x40\x4b\x90\x8a\x8a\x06\x6a\x07\x9d\xb0\xe3\x39\xe7\xa6\x2b\x34\x84\x15\xe0\xfc\x03\xc6\xad\xf4\x88\x66\x0d\xd5\x0f\x55\x35\x10\x70\xcc\x5a\x0d\x06\x94\x53\x5e\x58\xf7\x42\x30\x13\x8c\x60\xbe\x7b\xbe\x96\xb5\xe9\x26\x0d\x82\x08\x51\x7d\x70\x59\x8d\x65\x01\x1a\x7d\xef\x01\xb1\x63\xcb\xf7\x3b\x26\x37\x0d\xe8\x46\x89\x9e\x7f\x1a\xb6\xa4\x45\xb9\xa5\x3f\x3f\x95\xbe\x0d\x69\xcf\x08\x4e\x0b\xa8\xc4\x6a\x7b\x84\x7b\xea\x11\x4d\x44\x73\x42\x18\x19\xf0\x98\xcd\x29\x70\x83\x40\xbd\x8e\xe9\x42\x26\x78\xc3\x1d\x99\x14\xc2\x2b\xbc\xfe\x57\xfa\x98\x03\x5a\x75\xc2\x53\xe0\x3b\x6d\xbc\xe0\x34\xfa\x9d\x32\x41\xdf\x54\x38\x5a\xd6\xa4\x85\x6d\x33\x3d\x29\x31\x78\x8f\x9f\x17\x55\x82\xab\x8b\xbb\xc8\x4f\xf3\x45\x1e\x26\x43\x1d\xc9\xf1\xbc\xf8\x9a\xde\x14\xc9\xcd\x5a\x3c\xfc\x16\x52\x5c\xde\xf5\xfd\x5f\xe6\xd5\x66\xf6\xfb\x6c\x65\x4a\xec\x1c\x73\xa4\x29\x03\x89\x30\xd1\x74\x09\x1f\xa4\xef\x1b\xb4\xf9\x17\x75\x53\x0c\xb6\xd7\xef\xb9\x8e\xeb\x39\xae\x37\x71\xdd\xb8\xfd\x75\x5c\xd7\x9d\x19\xeb\x79\x89\x09\x62\x22\x6b\x0b\xae\xad\xa6\x77\x0a\x12\x55\x82\x17\x07\x55\x69\x4d\xfe\x69\xa8\xef\xb4\x2b\xc1\x2b\xca\xe1\xfd\x0a\xad\xb0\xd2\x88\x08\xce\x81\xe8\x6f\xcd\xc7\x77\xbd\x9e\xe3\xf6\x1c\x37\x9a\x78\x6e\x1c\x9c\xc7\x41\xd4\xe9\x46\xd1\xcc\xde\x8b\x7e\x3d\xdb\xff\x7a\xdd\x92\xbf\xb9\x72\xd0\xfa\xff\xa3\x3b\x47\x53\x62\xd7\x9b\x2e\x85\x52\x50\x51\x50\x07\x0f\xb7\x89\xa8\xb9\x96\x6b\x44\xbe\x69\x7a\x31\x3c\x44\x34\x4e\xa1\x8d\x68\x65\xb1\x87\xb5\x14\xcf\xf0\xf3\x85\xac\x1b\xbe\x23\xb6\x26\x25\x5b\x67\x04\x83\x23\x9e\xbd\x69\xf6\xc7\x8f\x5b\xed\x9f\x07\x04\xff\x53\x06\xbf\xe3\x04\x03\x8d\x33\xac\xf1\xbe\x0f\x98\x10\x50\x0a\x69\xf1\x04\xad\xdb\xa4\x13\x04\xbd\xd5\xf5\xf2\x8a\xc9\x84\x3d\x4f\x17\xdc\x4f\x57\x44\x66\x7e\x78\xe5\x8d\xfc\x4f\xfc\xfa\x61\x73\x4b\x86\x72\x3a\xa4\x78\x2e\xe4\x78\x34\x09\x9f\x1e\x53\xd1\xcf\x46\x83\xfe\x25\x9b\x6e\xe8\x53\x02\x84\x54\x79\xf6\x6b\x5a\x77\x8b\xcf\xf7\xd2\x1f\xcc\x04\xae\xbf\x8e\x52\x95\x05\xf3\x97\xee\x8b\x77\x77\x9b\x2e\x6e\xbf\x8c\xe7\x19\x03\x99\xcf\xf4\x74\x70\x2d\x5e\x06\xbd\x6b\x09\x6b\xca\xaf\xc6\xcf\xf2\x8e\x3d\x75\x5f\xd2\xf1\x23\x87\x44\x2e\x6e\x65\x76\xff\xfd\xe0\xb5\x49\xd5\x76\xb3\xb7\xd1\xe8\x6d\x9f\x78\xf6\xfa\x77\x00\x00\x00\xff\xff\x40\x20\x59\x15\x67\x08\x00\x00")

func mockMockJsonBytes() ([]byte, error) {
	return bindataRead(
		_mockMockJson,
		"mock/mock.json",
	)
}

func mockMockJson() (*asset, error) {
	bytes, err := mockMockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mock/mock.json", size: 2151, mode: os.FileMode(420), modTime: time.Unix(1499511511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testcaseTest1Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5d\x73\xe2\x36\x14\x7d\xcf\xaf\xf0\xf8\xb9\xa6\xb6\x89\x8d\xf1\x5b\xb3\x40\x3e\xda\x18\x27\x61\xbb\x81\x4e\x47\x23\xe4\x6b\x5b\x1b\x4b\x0a\x92\x0c\x81\x4e\xfe\x7b\xc7\x66\x69\x16\x50\xb2\xb4\xd3\x19\x86\xf1\x48\xe7\x1e\x49\xe7\xdc\x8f\xbf\xce\x2c\xcb\xb2\xec\x0c\x96\x94\x80\xb2\x63\x6b\xbb\xd0\x2e\xea\x12\x24\x13\x4a\x63\xbd\xbf\xd1\x6e\x8a\x9b\xab\x0b\xaf\xc4\x61\x72\x39\x9e\xf4\xcf\xfb\xdd\xd2\xc9\xc9\xcd\xd4\x71\x8a\x87\xc8\xfd\xb2\x61\xc9\x51\x44\x1b\x55\xd6\x8c\x66\x54\xaf\xed\xd8\x0a\xdc\x9f\x8e\xf7\x2b\x41\x70\x05\x76\x6c\xd9\xb9\x74\x46\xf7\xb6\x01\xa2\x81\x3d\x83\xc4\xba\x96\x80\xd4\x0e\xfd\xc9\x84\xa4\x0a\xd5\x8a\xf2\x02\x01\x03\x59\x00\x27\x6b\x54\x02\xd6\x76\x6c\xe5\xb8\x52\x60\x88\x28\xb1\x42\x39\xe6\x1f\x20\x94\xc8\xf5\x0a\x4b\x40\x4b\x90\x8a\x8a\x06\x6a\x07\x9d\xb0\xe3\x39\xe7\xa6\x2b\x34\x84\x15\xe0\xfc\x03\xc6\xad\xf4\x88\x66\x0d\xd5\x0f\x55\x35\x10\x70\xcc\x5a\x0d\x06\x94\x53\x5e\x58\xf7\x42\x30\x13\x8c\x60\xbe\x7b\xbe\x96\xb5\xe9\x26\x0d\x82\x08\x51\x7d\x70\x59\x8d\x65\x01\x1a\x7d\xef\x01\xb1\x63\xcb\xf7\x3b\x26\x37\x0d\xe8\x46\x89\x9e\x7f\x1a\xb6\xa4\x45\xb9\xa5\x3f\x3f\x95\xbe\x0d\x69\xcf\x08\x4e\x0b\xa8\xc4\x6a\x7b\x84\x7b\xea\x11\x4d\x44\x73\x42\x18\x19\xf0\x98\xcd\x29\x70\x83\x40\xbd\x8e\xe9\x42\x26\x78\xc3\x1d\x99\x14\xc2\x2b\xbc\xfe\x57\xfa\x98\x03\x5a\x75\xc2\x53\xe0\x3b\x6d\xbc\xe0\x34\xfa\x9d\x32\x41\xdf\x54\x38\x5a\xd6\xa4\x85\x6d\x33\x3d\x29\x31\x78\x8f\x9f\x17\x55\x82\xab\x8b\xbb\xc8\x4f\xf3\x45\x1e\x26\x43\x1d\xc9\xf1\xbc\xf8\x9a\xde\x14\xc9\xcd\x5a\x3c\xfc\x16\x52\x5c\xde\xf5\xfd\x5f\xe6\xd5\x66\xf6\xfb\x6c\x65\x4a\xec\x1c\x73\xa4\x29\x03\x89\x30\xd1\x74\x09\x1f\xa4\xef\x1b\xb4\xf9\x17\x75\x53\x0c\xb6\xd7\xef\xb9\x8e\xeb\x39\xae\x37\x71\xdd\xb8\xfd\x75\x5c\xd7\x9d\x19\xeb\x79\x89\x09\x62\x22\x6b\x0b\xae\xad\xa6\x77\x0a\x12\x55\x82\x17\x07\x55\x69\x4d\xfe\x69\xa8\xef\xb4\x2b\xc1\x2b\xca\xe1\xfd\x0a\xad\xb0\xd2\x88\x08\xce\x81\xe8\x6f\xcd\xc7\x77\xbd\x9e\xe3\xf6\x1c\x37\x9a\x78\x6e\x1c\x9c\xc7\x41\xd4\xe9\x46\xd1\xcc\xde\x8b\x7e\x3d\xdb\xff\x7a\xdd\x92\xbf\xb9\x72\xd0\xfa\xff\xa3\x3b\x47\x53\x62\xd7\x9b\x2e\x85\x52\x50\x51\x50\x07\x0f\xb7\x89\xa8\xb9\x96\x6b\x44\xbe\x69\x7a\x31\x3c\x44\x34\x4e\xa1\x8d\x68\x65\xb1\x87\xb5\x14\xcf\xf0\xf3\x85\xac\x1b\xbe\x23\xb6\x26\x25\x5b\x67\x04\x83\x23\x9e\xbd\x69\xf6\xc7\x8f\x5b\xed\x9f\x07\x04\xff\x53\x06\xbf\xe3\x04\x03\x8d\x33\xac\xf1\xbe\x0f\x98\x10\x50\x0a\x69\xf1\x04\xad\xdb\xa4\x13\x04\xbd\xd5\xf5\xf2\x8a\xc9\x84\x3d\x4f\x17\xdc\x4f\x57\x44\x66\x7e\x78\xe5\x8d\xfc\x4f\xfc\xfa\x61\x73\x4b\x86\x72\x3a\xa4\x78\x2e\xe4\x78\x34\x09\x9f\x1e\x53\xd1\xcf\x46\x83\xfe\x25\x9b\x6e\xe8\x53\x02\x84\x54\x79\xf6\x6b\x5a\x77\x8b\xcf\xf7\xd2\x1f\xcc\x04\xae\xbf\x8e\x52\x95\x05\xf3\x97\xee\x8b\x77\x77\x9b\x2e\x6e\xbf\x8c\xe7\x19\x03\x99\xcf\xf4\x74\x70\x2d\x5e\x06\xbd\x6b\x09\x6b\xca\xaf\xc6\xcf\xf2\x8e\x3d\x75\x5f\xd2\xf1\x23\x87\x44\x2e\x6e\x65\x76\xff\xfd\xe0\xb5\x49\xd5\x76\xb3\xb7\xd1\xe8\x6d\x9f\x78\xf6\xfa\x77\x00\x00\x00\xff\xff\x40\x20\x59\x15\x67\x08\x00\x00")

func testcaseTest1JsonBytes() ([]byte, error) {
	return bindataRead(
		_testcaseTest1Json,
		"testcase/test1.json",
	)
}

func testcaseTest1Json() (*asset, error) {
	bytes, err := testcaseTest1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testcase/test1.json", size: 2151, mode: os.FileMode(420), modTime: time.Unix(1499511516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testcaseTest2Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5d\x73\xe2\x36\x14\x7d\xcf\xaf\xf0\xf8\xb9\xa6\xb6\xc1\x60\xfc\xd6\x2c\x90\x8f\x36\xc6\x49\xd8\x6e\xa0\xd3\xd1\x08\xf9\xda\xd6\xc6\x92\x82\x24\x43\xa0\x93\xff\xde\xb1\x59\x9a\x05\x14\x96\x76\x3a\x93\xc9\x30\xd6\xb9\xe7\x4a\xe7\xdc\x8f\xbf\x2e\x2c\xcb\xb2\xec\x14\x96\x94\x80\xb2\x23\x6b\xfb\xa1\xf9\xa8\x0b\x90\x4c\x28\x8d\xf5\xfe\x41\x73\x28\x6e\xaf\x2f\xbd\x02\x77\xe3\xab\xf1\xa4\xdf\xe9\xb7\x0b\x27\x23\xb7\x53\xc7\xc9\x1f\x43\xf7\xcb\x86\xc5\x47\x11\x4d\x54\x51\x31\x9a\x52\xbd\xb6\x23\xab\xe7\xfe\x74\x7c\x5e\x0a\x82\x4b\xb0\x23\xcb\xce\xa4\x33\x7a\xb0\x0d\x10\x0d\xec\x05\x24\xd6\x95\x04\xa4\x76\xe8\x4f\x26\x24\x55\xa8\x52\x94\xe7\x08\x18\xc8\x1c\x38\x59\xa3\x02\xb0\xb6\x23\x2b\xc3\xa5\x02\x43\x44\x81\x15\xca\x30\x3f\x81\x50\x22\xd3\x2b\x2c\x01\x2d\x41\x2a\x2a\x6a\xa8\x1d\xb4\xba\x2d\xcf\xe9\x98\xae\x50\x13\x96\x80\xb3\x13\x8c\x5b\xe9\x11\x4d\x6b\xaa\x1f\xa8\x3a\x36\xe5\xe0\x98\x35\x1a\x0c\x28\xa7\x3c\xb7\x1e\x84\x60\x26\x18\xc1\x7c\xf7\x7c\x2d\x2b\xd3\x4d\x6a\x04\x11\xa2\x3c\x71\x59\x8d\x65\x0e\x1a\x7d\xef\x01\xb1\x23\xcb\xf7\x5b\x26\x37\x0d\xe8\x5a\x89\x5e\xe7\x3c\x6c\x41\xf3\x62\x4b\xdf\x39\x97\xbe\x09\x69\x72\x04\xe7\x05\x94\x62\xb5\x4d\xe1\x9e\x9b\xa2\x8e\xa8\x33\x74\x43\x03\x1e\xb3\x39\x05\x6e\x10\x28\x6c\x99\x2e\x64\x82\xd7\xdc\x61\xcf\x04\x5e\xe1\xf5\xbf\xd2\xc7\x1c\xd0\xa8\xd3\x3d\x07\xbe\xd3\xc6\x0b\xce\xa3\xdf\x29\x13\xf4\x4d\x8d\xa3\x65\x45\x1a\xd8\xb6\xd2\xe3\x02\x83\xf7\xf4\x79\x51\xc6\xb8\xbc\xbc\x0f\xfd\x24\x5b\x64\xdd\x78\xa8\x43\x39\x9e\xe7\x5f\x93\xdb\x3c\xbe\x5d\x8b\xc7\xdf\xba\x14\x17\xf7\x7d\xff\x97\x79\xb9\x99\xfd\x3e\x5b\x99\x0a\x3b\xc3\x1c\x69\xca\x40\x22\x4c\x34\x5d\xc2\x89\xf2\x7d\x87\xd6\xff\x45\x55\x37\x83\xed\xf5\x7b\xae\xe3\x7a\x8e\xeb\x4d\x5c\x37\x6a\xfe\x5a\xae\xeb\xce\x8c\xfd\xbc\xc4\x04\x31\x91\x36\x0d\xd7\x74\xd3\x07\x0d\x89\x4a\xc1\xf3\x83\xae\xb4\x26\xff\x0c\xd4\x0f\xc6\x95\xe0\x25\xe5\xf0\x71\x87\x96\x58\x69\x44\x04\xe7\x40\xf4\xb7\xe1\xe3\xbb\x5e\xcf\x71\x7b\x8e\x1b\x4e\x3c\x37\x0a\x3a\x51\x10\xb6\xda\x61\x38\xb3\xf7\xa2\xdf\x2e\xf6\x7f\xbd\x6d\xc9\xdf\x5d\x39\x18\xfd\xff\xd1\x9d\xa3\x2d\xb1\x9b\x4d\x57\x42\x29\x28\x29\xa8\x83\x87\xdb\x44\x54\x5c\xcb\x35\x22\xdf\x34\xbd\x1c\x1e\x22\x6a\xa7\xd0\x46\x34\xb2\xd8\xc3\x4a\x8a\x17\xf8\xf9\x52\x56\x35\xdf\x11\x5b\x5d\x92\x8d\x33\x82\xc1\x11\xcf\xde\x36\xfb\xe3\xc7\x0b\xec\xcf\x03\x82\xff\xa9\x82\x3f\x70\x82\x81\xc6\x29\xd6\x78\xdf\x07\x4c\x08\x28\x85\xb4\x78\x86\xc6\x6d\xd2\x0a\x82\xde\xea\x66\x79\xcd\x64\xcc\x5e\xa6\x0b\xee\x27\x2b\x22\x53\xbf\x7b\xed\x8d\xfc\x4f\xfc\xe6\x71\x73\x47\x86\x72\x3a\xa4\x78\x2e\xe4\x78\x34\xe9\x3e\x3f\x25\xa2\x9f\x8e\x06\xfd\x2b\x36\xdd\xd0\xe7\x18\x08\x29\xb3\xf4\xd7\xa4\x6a\xe7\x9f\x1f\xa4\x3f\x98\x09\x5c\x7d\x1d\x25\x2a\x0d\xe6\xaf\xed\x57\xef\xfe\x2e\x59\xdc\x7d\x19\xcf\x53\x06\x32\x9b\xe9\xe9\xe0\x46\xbc\x0e\x7a\x37\x12\xd6\x94\x5f\x8f\x5f\xe4\x3d\x7b\x6e\xbf\x26\xe3\x27\x0e\xb1\x5c\xdc\xc9\xf4\xe1\xfb\xc5\x6b\x93\xb2\x99\x66\xef\xab\xd1\xdb\x3e\xf1\xe2\xed\xef\x00\x00\x00\xff\xff\x37\x77\xf3\xeb\x67\x08\x00\x00")

func testcaseTest2JsonBytes() ([]byte, error) {
	return bindataRead(
		_testcaseTest2Json,
		"testcase/test2.json",
	)
}

func testcaseTest2Json() (*asset, error) {
	bytes, err := testcaseTest2JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testcase/test2.json", size: 2151, mode: os.FileMode(420), modTime: time.Unix(1499515965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mock/mock.json": mockMockJson,
	"testcase/test1.json": testcaseTest1Json,
	"testcase/test2.json": testcaseTest2Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mock": &bintree{nil, map[string]*bintree{
		"mock.json": &bintree{mockMockJson, map[string]*bintree{}},
	}},
	"testcase": &bintree{nil, map[string]*bintree{
		"test1.json": &bintree{testcaseTest1Json, map[string]*bintree{}},
		"test2.json": &bintree{testcaseTest2Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

